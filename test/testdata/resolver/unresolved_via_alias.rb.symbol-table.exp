class ::<root> < ::Object ()
  class ::<Class:<root>>[<AttachedClass>] < ::<Class:Object> (Sig)
    method ::<Class:<root>>#<static-init> (<blk>) @ test/testdata/resolver/unresolved_via_alias.rb:2
      argument <blk><block> @ Loc {file=test/testdata/resolver/unresolved_via_alias.rb start=??? end=???}
  class ::A < ::Object () @ test/testdata/resolver/unresolved_via_alias.rb:4
  class ::<Class:A>[<AttachedClass>] < ::<Class:Object> () @ test/testdata/resolver/unresolved_via_alias.rb:4
    type-member(+) ::<Class:A>::<AttachedClass> -> T.attached_class (of A) @ test/testdata/resolver/unresolved_via_alias.rb:4
    method ::<Class:A>#<static-init> (<blk>) @ test/testdata/resolver/unresolved_via_alias.rb:4
      argument <blk><block> @ Loc {file=test/testdata/resolver/unresolved_via_alias.rb start=??? end=???}
  static-field ::AliasToA -> <Alias: ::A > @ test/testdata/resolver/unresolved_via_alias.rb:6
  class ::Object < ::BasicObject (Kernel) @ https://github.com/sorbet/sorbet/tree/master/rbi/core/object.rbi#LCENSORED
    method ::Object#example : private (<blk>) -> AliasToA::B (unresolved) @ test/testdata/resolver/unresolved_via_alias.rb:10
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/resolver/unresolved_via_alias.rb start=??? end=???}

